import collections
def bfs(graph, root):
    visited = set()
    queue = collections.deque([root])
    
    while queue:
        vertex = queue.popleft()
        if vertex not in visited:
            visited.add(vertex)
            for i in graph[vertex]:
                if i not in visited:
                    queue.append(i)
                    
    return visited

def dfs(graph, root):
    visited = set()
    stack = [root] 

    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            for neighbor in graph[vertex]:
                if neighbor not in visited:
                    stack.append(neighbor)
    
    return visited

if __name__ == "__main__":
    graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

    
    print("BFS:", bfs(graph, 'A'))
    print("DFS:", dfs(graph,'A'))